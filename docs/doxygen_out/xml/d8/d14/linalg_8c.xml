<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d8/d14/linalg_8c" kind="file" language="C++">
    <compoundname>linalg.c</compoundname>
    <includes local="yes">linalg.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/govind/Desktop/git/qoco/src/linalg.c</label>
        <link refid="d8/d14/linalg_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>linalg.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="d8/d14/linalg_8c_1acc38bacc4387241a20e9db0ba2f931e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QOCOCscMatrix *</type>
        <definition>QOCOCscMatrix* new_qoco_csc_matrix</definition>
        <argsstring>(const QOCOCscMatrix *A)</argsstring>
        <name>new_qoco_csc_matrix</name>
        <param>
          <type>const QOCOCscMatrix *</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="13" column="15" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="13" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="d8/d14/linalg_8c_1a38098152892b127e986ebc2994b7dcce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QOCOCscMatrix *</type>
        <definition>QOCOCscMatrix* construct_identity</definition>
        <argsstring>(QOCOInt n, QOCOFloat lambda)</argsstring>
        <name>construct_identity</name>
        <param>
          <type>QOCOInt</type>
          <declname>n</declname>
        </param>
        <param>
          <type>QOCOFloat</type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="49" column="15" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="49" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="d8/d14/linalg_8c_1a4e4c7c1df7c224d28c9ee82553cfda94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_qoco_csc_matrix</definition>
        <argsstring>(QOCOCscMatrix *A)</argsstring>
        <name>free_qoco_csc_matrix</name>
        <param>
          <type>QOCOCscMatrix *</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="75" column="6" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="75" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="d8/d14/linalg_8c_1a298815cf49d7a35894fd063fb3f59d07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copy_arrayf</definition>
        <argsstring>(const QOCOFloat *x, QOCOFloat *y, QOCOInt n)</argsstring>
        <name>copy_arrayf</name>
        <param>
          <type>const QOCOFloat *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>QOCOFloat *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>QOCOInt</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="83" column="6" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="83" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="d8/d14/linalg_8c_1a01e27f9edf9e2cae2032501a56a0b5f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copy_and_negate_arrayf</definition>
        <argsstring>(const QOCOFloat *x, QOCOFloat *y, QOCOInt n)</argsstring>
        <name>copy_and_negate_arrayf</name>
        <param>
          <type>const QOCOFloat *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>QOCOFloat *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>QOCOInt</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="93" column="6" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="93" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="d8/d14/linalg_8c_1a2ce684c84dfdc8c000a2aaa88487c4cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copy_arrayi</definition>
        <argsstring>(const QOCOInt *x, QOCOInt *y, QOCOInt n)</argsstring>
        <name>copy_arrayi</name>
        <param>
          <type>const QOCOInt *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>QOCOInt *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>QOCOInt</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="103" column="6" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="103" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="d8/d14/linalg_8c_1af6aa23417cb2b6b034862e9c268876fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QOCOFloat</type>
        <definition>QOCOFloat dot</definition>
        <argsstring>(const QOCOFloat *u, const QOCOFloat *v, QOCOInt n)</argsstring>
        <name>dot</name>
        <param>
          <type>const QOCOFloat *</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const QOCOFloat *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>QOCOInt</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="113" column="11" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="113" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="d8/d14/linalg_8c_1ab5f0f37d238fd5f833e790474d6429be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QOCOInt</type>
        <definition>QOCOInt max_arrayi</definition>
        <argsstring>(const QOCOInt *x, QOCOInt n)</argsstring>
        <name>max_arrayi</name>
        <param>
          <type>const QOCOInt *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>QOCOInt</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="125" column="9" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="125" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="d8/d14/linalg_8c_1aed2caeb493cbf251a8d9e446a3d19fc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scale_arrayf</definition>
        <argsstring>(const QOCOFloat *x, QOCOFloat *y, QOCOFloat s, QOCOInt n)</argsstring>
        <name>scale_arrayf</name>
        <param>
          <type>const QOCOFloat *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>QOCOFloat *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>QOCOFloat</type>
          <declname>s</declname>
        </param>
        <param>
          <type>QOCOInt</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="136" column="6" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="136" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="d8/d14/linalg_8c_1a83d0613ee15321b01a503789bab214dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void axpy</definition>
        <argsstring>(const QOCOFloat *x, const QOCOFloat *y, QOCOFloat *z, QOCOFloat a, QOCOInt n)</argsstring>
        <name>axpy</name>
        <param>
          <type>const QOCOFloat *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const QOCOFloat *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>QOCOFloat *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>QOCOFloat</type>
          <declname>a</declname>
        </param>
        <param>
          <type>QOCOInt</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="146" column="6" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="146" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="d8/d14/linalg_8c_1afc3ad5be9a59c74f4883ef3994c50328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USpMv</definition>
        <argsstring>(const QOCOCscMatrix *M, const QOCOFloat *v, QOCOFloat *r)</argsstring>
        <name>USpMv</name>
        <param>
          <type>const QOCOCscMatrix *</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const QOCOFloat *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>QOCOFloat *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="157" column="6" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="157" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="d8/d14/linalg_8c_1af8b487d55e70aa8c15faa8095c92d41c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpMv</definition>
        <argsstring>(const QOCOCscMatrix *M, const QOCOFloat *v, QOCOFloat *r)</argsstring>
        <name>SpMv</name>
        <param>
          <type>const QOCOCscMatrix *</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const QOCOFloat *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>QOCOFloat *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="174" column="6" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="174" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="d8/d14/linalg_8c_1acf4b7a681a7930df3ea240a3c87d5737" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpMtv</definition>
        <argsstring>(const QOCOCscMatrix *M, const QOCOFloat *v, QOCOFloat *r)</argsstring>
        <name>SpMtv</name>
        <param>
          <type>const QOCOCscMatrix *</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const QOCOFloat *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>QOCOFloat *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="192" column="6" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="192" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="d8/d14/linalg_8c_1a8bc5eb1d540eaf36dcb07c5da089f7b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QOCOFloat</type>
        <definition>QOCOFloat inf_norm</definition>
        <argsstring>(const QOCOFloat *x, QOCOInt n)</argsstring>
        <name>inf_norm</name>
        <param>
          <type>const QOCOFloat *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>QOCOInt</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="210" column="11" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="210" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="d8/d14/linalg_8c_1acec2b6c1dc707854f23d505b1fc42ab1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QOCOInt</type>
        <definition>QOCOInt regularize</definition>
        <argsstring>(QOCOCscMatrix *M, QOCOFloat lambda, QOCOInt *nzadded_idx)</argsstring>
        <name>regularize</name>
        <param>
          <type>QOCOCscMatrix *</type>
          <declname>M</declname>
        </param>
        <param>
          <type>QOCOFloat</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type>QOCOInt *</type>
          <declname>nzadded_idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="223" column="9" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="223" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="d8/d14/linalg_8c_1ad6f0a241171053d252ef5ff6c7cdf53a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void unregularize</definition>
        <argsstring>(QOCOCscMatrix *M, QOCOFloat lambda)</argsstring>
        <name>unregularize</name>
        <param>
          <type>QOCOCscMatrix *</type>
          <declname>M</declname>
        </param>
        <param>
          <type>QOCOFloat</type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="279" column="6" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="279" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="d8/d14/linalg_8c_1a824536c623fa28c6bbe4b820ab6ba65a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void col_inf_norm_USymm</definition>
        <argsstring>(const QOCOCscMatrix *M, QOCOFloat *norm)</argsstring>
        <name>col_inf_norm_USymm</name>
        <param>
          <type>const QOCOCscMatrix *</type>
          <declname>M</declname>
        </param>
        <param>
          <type>QOCOFloat *</type>
          <declname>norm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="300" column="6" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="300" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="d8/d14/linalg_8c_1a0b420ad549447d77bf28bf2732108203" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void row_inf_norm</definition>
        <argsstring>(const QOCOCscMatrix *M, QOCOFloat *norm)</argsstring>
        <name>row_inf_norm</name>
        <param>
          <type>const QOCOCscMatrix *</type>
          <declname>M</declname>
        </param>
        <param>
          <type>QOCOFloat *</type>
          <declname>norm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="320" column="6" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="320" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="d8/d14/linalg_8c_1a1937734d9bd6962c5ff493f74d867e8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QOCOCscMatrix *</type>
        <definition>QOCOCscMatrix* create_transposed_matrix</definition>
        <argsstring>(const QOCOCscMatrix *A)</argsstring>
        <name>create_transposed_matrix</name>
        <param>
          <type>const QOCOCscMatrix *</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="335" column="15" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="335" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="d8/d14/linalg_8c_1a2fae5e0df1f9fb3d70115f91a74c9e99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void row_col_scale</definition>
        <argsstring>(const QOCOCscMatrix *M, QOCOFloat *E, QOCOFloat *D)</argsstring>
        <name>row_col_scale</name>
        <param>
          <type>const QOCOCscMatrix *</type>
          <declname>M</declname>
        </param>
        <param>
          <type>QOCOFloat *</type>
          <declname>E</declname>
        </param>
        <param>
          <type>QOCOFloat *</type>
          <declname>D</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="379" column="6" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="379" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="d8/d14/linalg_8c_1ada738414c28d331a24f6095fafebe1c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ew_product</definition>
        <argsstring>(QOCOFloat *x, const QOCOFloat *y, QOCOFloat *z, QOCOInt n)</argsstring>
        <name>ew_product</name>
        <param>
          <type>QOCOFloat *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const QOCOFloat *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>QOCOFloat *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>QOCOInt</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="388" column="6" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="388" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="d8/d14/linalg_8c_1a9399c635b5b4fb0e61f186adfc1d0df2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void invert_permutation</definition>
        <argsstring>(const QOCOInt *p, QOCOInt *pinv, QOCOInt n)</argsstring>
        <name>invert_permutation</name>
        <param>
          <type>const QOCOInt *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>QOCOInt *</type>
          <declname>pinv</declname>
        </param>
        <param>
          <type>QOCOInt</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="395" column="6" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="395" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="d8/d14/linalg_8c_1a26c94e421ef7f9b5895f6b040069c631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QOCOInt</type>
        <definition>QOCOInt cumsum</definition>
        <argsstring>(QOCOInt *p, QOCOInt *c, QOCOInt n)</argsstring>
        <name>cumsum</name>
        <param>
          <type>QOCOInt *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>QOCOInt *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>QOCOInt</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="402" column="9" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="402" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="d8/d14/linalg_8c_1a9b96a76f1698803fd7cb386fcdfcda57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QOCOCscMatrix *</type>
        <definition>QOCOCscMatrix* csc_symperm</definition>
        <argsstring>(const QOCOCscMatrix *A, const QOCOInt *pinv, QOCOInt *AtoC)</argsstring>
        <name>csc_symperm</name>
        <param>
          <type>const QOCOCscMatrix *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const QOCOInt *</type>
          <declname>pinv</declname>
        </param>
        <param>
          <type>QOCOInt *</type>
          <declname>AtoC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/govind/Desktop/git/qoco/src/linalg.c" line="417" column="15" bodyfile="/home/govind/Desktop/git/qoco/src/linalg.c" bodystart="417" bodyend="480"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Govind M. Chari <ulink url="mailto:govindchari1@gmail.com">govindchari1@gmail.com</ulink></para>
</simplesect>
</para>
<sect1 id="d3/d91/utils_8c_1LICENSE">
<title>LICENSE</title>
<para>Copyright (c) 2024, Govind M. Chari This source code is licensed under the BSD 2-Clause License </para>
</sect1>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;linalg.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal">QOCOCscMatrix*<sp/><ref refid="d8/d14/linalg_8c_1acc38bacc4387241a20e9db0ba2f931e4" kindref="member">new_qoco_csc_matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOCscMatrix*<sp/>A)</highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>QOCOCscMatrix*<sp/>M<sp/>=<sp/>qoco_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(QOCOCscMatrix));</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>QOCOInt<sp/>m<sp/>=<sp/>A-&gt;m;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>QOCOInt<sp/>n<sp/>=<sp/>A-&gt;n;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>QOCOInt<sp/>nnz<sp/>=<sp/>A-&gt;nnz;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>QOCOFloat*<sp/>x<sp/>=<sp/>qoco_malloc(nnz<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(QOCOFloat));</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>QOCOInt*<sp/>p<sp/>=<sp/>qoco_malloc((n<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(QOCOInt));</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>QOCOInt*<sp/>i<sp/>=<sp/>qoco_malloc(nnz<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(QOCOInt));</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/d14/linalg_8c_1a298815cf49d7a35894fd063fb3f59d07" kindref="member">copy_arrayf</ref>(A-&gt;x,<sp/>x,<sp/>nnz);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/d14/linalg_8c_1a2ce684c84dfdc8c000a2aaa88487c4cf" kindref="member">copy_arrayi</ref>(A-&gt;i,<sp/>i,<sp/>nnz);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/d14/linalg_8c_1a2ce684c84dfdc8c000a2aaa88487c4cf" kindref="member">copy_arrayi</ref>(A-&gt;p,<sp/>p,<sp/>n<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>M-&gt;m<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>M-&gt;n<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>M-&gt;nnz<sp/>=<sp/>nnz;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>M-&gt;x<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>M-&gt;i<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>M-&gt;p<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>M-&gt;m<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>M-&gt;n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>M-&gt;nnz<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>M-&gt;x<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>M-&gt;i<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>M-&gt;p<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>M;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">QOCOCscMatrix*<sp/><ref refid="d8/d14/linalg_8c_1a38098152892b127e986ebc2994b7dcce" kindref="member">construct_identity</ref>(QOCOInt<sp/>n,<sp/>QOCOFloat<sp/>lambda)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>QOCOCscMatrix*<sp/>M<sp/>=<sp/>qoco_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(QOCOCscMatrix));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>QOCOFloat*<sp/>x<sp/>=<sp/>qoco_malloc(n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(QOCOFloat));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>QOCOInt*<sp/>p<sp/>=<sp/>qoco_malloc((n<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(QOCOInt));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>QOCOInt*<sp/>i<sp/>=<sp/>qoco_malloc(n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(QOCOInt));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>M-&gt;m<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>M-&gt;n<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>M-&gt;nnz<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>M-&gt;x<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>M-&gt;i<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>M-&gt;p<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>n;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>M-&gt;i[k]<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>M-&gt;x[k]<sp/>=<sp/>lambda;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>n<sp/>+<sp/>1;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>M-&gt;p[k]<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>M;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d8/d14/linalg_8c_1a4e4c7c1df7c224d28c9ee82553cfda94" kindref="member">free_qoco_csc_matrix</ref>(QOCOCscMatrix*<sp/>A)</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>free(A-&gt;x);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>free(A-&gt;i);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>free(A-&gt;p);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>free(A);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d8/d14/linalg_8c_1a298815cf49d7a35894fd063fb3f59d07" kindref="member">copy_arrayf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOFloat*<sp/>x,<sp/>QOCOFloat*<sp/>y,<sp/>QOCOInt<sp/>n)</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>qoco_assert(x<sp/>||<sp/>n<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>qoco_assert(y<sp/>||<sp/>n<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>y[i]<sp/>=<sp/>x[i];</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d8/d14/linalg_8c_1a01e27f9edf9e2cae2032501a56a0b5f9" kindref="member">copy_and_negate_arrayf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOFloat*<sp/>x,<sp/>QOCOFloat*<sp/>y,<sp/>QOCOInt<sp/>n)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>qoco_assert(x<sp/>||<sp/>n<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>qoco_assert(y<sp/>||<sp/>n<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>y[i]<sp/>=<sp/>-x[i];</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d8/d14/linalg_8c_1a2ce684c84dfdc8c000a2aaa88487c4cf" kindref="member">copy_arrayi</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOInt*<sp/>x,<sp/>QOCOInt*<sp/>y,<sp/>QOCOInt<sp/>n)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>qoco_assert(x<sp/>||<sp/>n<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>qoco_assert(y<sp/>||<sp/>n<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>y[i]<sp/>=<sp/>x[i];</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">QOCOFloat<sp/><ref refid="d8/d14/linalg_8c_1af6aa23417cb2b6b034862e9c268876fb" kindref="member">dot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOFloat*<sp/>u,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOFloat*<sp/>v,<sp/>QOCOInt<sp/>n)</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>qoco_assert(u<sp/>||<sp/>n<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>qoco_assert(v<sp/>||<sp/>n<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>QOCOFloat<sp/>x<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>u[i]<sp/>*<sp/>v[i];</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">QOCOInt<sp/><ref refid="d8/d14/linalg_8c_1ab5f0f37d238fd5f833e790474d6429be" kindref="member">max_arrayi</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOInt*<sp/>x,<sp/>QOCOInt<sp/>n)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>qoco_assert(x<sp/>||<sp/>n<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>QOCOInt<sp/>max<sp/>=<sp/>-QOCOInt_MAX;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>max<sp/>=<sp/>qoco_max(max,<sp/>x[i]);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d8/d14/linalg_8c_1aed2caeb493cbf251a8d9e446a3d19fc6" kindref="member">scale_arrayf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOFloat*<sp/>x,<sp/>QOCOFloat*<sp/>y,<sp/>QOCOFloat<sp/>s,<sp/>QOCOInt<sp/>n)</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>qoco_assert(x<sp/>||<sp/>n<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>qoco_assert(y<sp/>||<sp/>n<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>y[i]<sp/>=<sp/>s<sp/>*<sp/>x[i];</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d8/d14/linalg_8c_1a83d0613ee15321b01a503789bab214dc" kindref="member">axpy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOFloat*<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOFloat*<sp/>y,<sp/>QOCOFloat*<sp/>z,<sp/>QOCOFloat<sp/>a,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QOCOInt<sp/>n)</highlight></codeline>
<codeline lineno="148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>qoco_assert(x<sp/>||<sp/>n<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>qoco_assert(y<sp/>||<sp/>n<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>z[i]<sp/>=<sp/>a<sp/>*<sp/>x[i]<sp/>+<sp/>y[i];</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d8/d14/linalg_8c_1afc3ad5be9a59c74f4883ef3994c50328" kindref="member">USpMv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOCscMatrix*<sp/>M,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOFloat*<sp/>v,<sp/>QOCOFloat*<sp/>r)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>qoco_assert(M);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>qoco_assert(v);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>qoco_assert(r);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>M-&gt;n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>r[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>j<sp/>=<sp/>M-&gt;p[i];<sp/>j<sp/>&lt;<sp/>M-&gt;p[i<sp/>+<sp/>1];<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>M-&gt;i[j];</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r[row]<sp/>+=<sp/>M-&gt;x[j]<sp/>*<sp/>v[i];</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row<sp/>!=<sp/>i)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r[i]<sp/>+=<sp/>M-&gt;x[j]<sp/>*<sp/>v[row];</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d8/d14/linalg_8c_1af8b487d55e70aa8c15faa8095c92d41c" kindref="member">SpMv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOCscMatrix*<sp/>M,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOFloat*<sp/>v,<sp/>QOCOFloat*<sp/>r)</highlight></codeline>
<codeline lineno="175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>qoco_assert(M);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>qoco_assert(v);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>qoco_assert(r);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>result<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>M-&gt;m;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>r[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>M-&gt;n;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>i<sp/>=<sp/>M-&gt;p[j];<sp/>i<sp/>&lt;<sp/>M-&gt;p[j<sp/>+<sp/>1];<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r[M-&gt;i[i]]<sp/>+=<sp/>M-&gt;x[i]<sp/>*<sp/>v[j];</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d8/d14/linalg_8c_1acf4b7a681a7930df3ea240a3c87d5737" kindref="member">SpMtv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOCscMatrix*<sp/>M,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOFloat*<sp/>v,<sp/>QOCOFloat*<sp/>r)</highlight></codeline>
<codeline lineno="193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>qoco_assert(M);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>qoco_assert(v);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>qoco_assert(r);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>result<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>M-&gt;n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>r[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>M-&gt;n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>j<sp/>=<sp/>M-&gt;p[i];<sp/>j<sp/>&lt;<sp/>M-&gt;p[i<sp/>+<sp/>1];<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r[i]<sp/>+=<sp/>M-&gt;x[j]<sp/>*<sp/>v[M-&gt;i[j]];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal">QOCOFloat<sp/><ref refid="d8/d14/linalg_8c_1a8bc5eb1d540eaf36dcb07c5da089f7b2" kindref="member">inf_norm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOFloat*<sp/>x,<sp/>QOCOInt<sp/>n)</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>qoco_assert(x<sp/>||<sp/>n<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>QOCOFloat<sp/>norm<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>QOCOFloat<sp/>xi;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>xi<sp/>=<sp/>qoco_abs(x[i]);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>norm<sp/>=<sp/>qoco_max(norm,<sp/>xi);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>norm;</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">QOCOInt<sp/><ref refid="d8/d14/linalg_8c_1acec2b6c1dc707854f23d505b1fc42ab1" kindref="member">regularize</ref>(QOCOCscMatrix*<sp/>M,<sp/>QOCOFloat<sp/>lambda,<sp/>QOCOInt*<sp/>nzadded_idx)</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>QOCOInt<sp/>num_nz<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>over<sp/>each<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>M-&gt;n;<sp/>col++)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>QOCOInt<sp/>start<sp/>=<sp/>M-&gt;p[col];</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>QOCOInt<sp/>end<sp/>=<sp/>M-&gt;p[col<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Flag<sp/>to<sp/>check<sp/>if<sp/>the<sp/>diagonal<sp/>element<sp/>exists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>QOCOInt<sp/>diagonal_exists<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>over<sp/>the<sp/>elements<sp/>in<sp/>the<sp/>current<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>insert_set<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>QOCOInt<sp/>insert<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>i<sp/>=<sp/>start;<sp/>i<sp/>&lt;<sp/>end;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!insert_set<sp/>&amp;&amp;<sp/>M-&gt;i[i]<sp/>&gt;<sp/>col)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_set<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(M-&gt;i[i]<sp/>==<sp/>col)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M-&gt;x[i]<sp/>+=<sp/>lambda;<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>lambda<sp/>to<sp/>the<sp/>diagonal<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diagonal_exists<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>diagonal<sp/>element<sp/>does<sp/>not<sp/>exist,<sp/>we<sp/>need<sp/>to<sp/>insert<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!diagonal_exists)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shift<sp/>all<sp/>the<sp/>elements<sp/>in<sp/>values<sp/>and<sp/>row_indices<sp/>arrays<sp/>to<sp/>make<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>new<sp/>diagonal<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>M-&gt;nnz++;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>M-&gt;x<sp/>=<sp/>realloc(M-&gt;x,<sp/>M-&gt;nnz<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(QOCOFloat));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>M-&gt;i<sp/>=<sp/>realloc(M-&gt;i,<sp/>M-&gt;nnz<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(QOCOInt));</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>i<sp/>=<sp/>M-&gt;nnz<sp/>-<sp/>1;<sp/>i<sp/>&gt;<sp/>insert;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M-&gt;x[i]<sp/>=<sp/>M-&gt;x[i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M-&gt;i[i]<sp/>=<sp/>M-&gt;i[i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>the<sp/>new<sp/>diagonal<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>M-&gt;x[insert]<sp/>=<sp/>lambda;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>M-&gt;i[insert]<sp/>=<sp/>col;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nzadded_idx)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nzadded_idx[num_nz]<sp/>=<sp/>insert;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_nz++;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>column_pointers<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>i<sp/>=<sp/>col<sp/>+<sp/>1;<sp/>i<sp/>&lt;=<sp/>M-&gt;n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M-&gt;p[i]++;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_nz;</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d8/d14/linalg_8c_1ad6f0a241171053d252ef5ff6c7cdf53a" kindref="member">unregularize</ref>(QOCOCscMatrix*<sp/>M,<sp/>QOCOFloat<sp/>lambda)</highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>over<sp/>each<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>M-&gt;n;<sp/>col++)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>QOCOInt<sp/>start<sp/>=<sp/>M-&gt;p[col];</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>QOCOInt<sp/>end<sp/>=<sp/>M-&gt;p[col<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>over<sp/>the<sp/>elements<sp/>in<sp/>the<sp/>current<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>insert_set<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>i<sp/>=<sp/>start;<sp/>i<sp/>&lt;<sp/>end;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!insert_set<sp/>&amp;&amp;<sp/>M-&gt;i[i]<sp/>&gt;<sp/>col)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_set<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(M-&gt;i[i]<sp/>==<sp/>col)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M-&gt;x[i]<sp/>-=<sp/>lambda;<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>lambda<sp/>to<sp/>the<sp/>diagonal<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d8/d14/linalg_8c_1a824536c623fa28c6bbe4b820ab6ba65a" kindref="member">col_inf_norm_USymm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOCscMatrix*<sp/>M,<sp/>QOCOFloat*<sp/>norm)</highlight></codeline>
<codeline lineno="301"><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>M-&gt;n;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>idx<sp/>=<sp/>M-&gt;p[j];<sp/>idx<sp/>&lt;<sp/>M-&gt;p[j<sp/>+<sp/>1];<sp/>idx++)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QOCOInt<sp/>row<sp/>=<sp/>M-&gt;i[idx];</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QOCOFloat<sp/>val<sp/>=<sp/>qoco_abs(M-&gt;x[idx]);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&gt;<sp/>norm[j])<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>norm[j]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row<sp/>!=<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&gt;<sp/>norm[row])<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>norm[row]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d8/d14/linalg_8c_1a0b420ad549447d77bf28bf2732108203" kindref="member">row_inf_norm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOCscMatrix*<sp/>M,<sp/>QOCOFloat*<sp/>norm)</highlight></codeline>
<codeline lineno="321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>M-&gt;m;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>QOCOFloat<sp/>nrm<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>QOCOFloat<sp/>xi;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>nz<sp/>=<sp/>0;<sp/>nz<sp/>&lt;<sp/>M-&gt;nnz;<sp/>++nz)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>M-&gt;i[nz])<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xi<sp/>=<sp/>qoco_abs(M-&gt;x[nz]);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrm<sp/>=<sp/>qoco_max(nrm,<sp/>xi);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>norm[i]<sp/>=<sp/>nrm;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">QOCOCscMatrix*<sp/><ref refid="d8/d14/linalg_8c_1a1937734d9bd6962c5ff493f74d867e8e" kindref="member">create_transposed_matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOCscMatrix*<sp/>A)</highlight></codeline>
<codeline lineno="336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>QOCOCscMatrix*<sp/>B<sp/>=<sp/>qoco_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(QOCOCscMatrix));</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>B-&gt;m<sp/>=<sp/>A-&gt;n;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>B-&gt;n<sp/>=<sp/>A-&gt;m;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>B-&gt;nnz<sp/>=<sp/>A-&gt;nnz;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>the<sp/>transpose<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>B-&gt;p<sp/>=<sp/>(QOCOInt*)qoco_malloc((A-&gt;m<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int));</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>B-&gt;i<sp/>=<sp/>(QOCOInt*)qoco_malloc(A-&gt;nnz<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(QOCOInt));</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>B-&gt;x<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)qoco_malloc(A-&gt;nnz<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(QOCOFloat));</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Count<sp/>the<sp/>number<sp/>of<sp/>non-zeros<sp/>in<sp/>each<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>QOCOInt*<sp/>row_counts<sp/>=<sp/>(QOCOInt*)calloc(A-&gt;m,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(QOCOInt));</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>A-&gt;n;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>A-&gt;p[j];<sp/>i<sp/>&lt;<sp/>A-&gt;p[j<sp/>+<sp/>1];<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>row_counts[A-&gt;i[i]]++;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>B-&gt;p[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>A-&gt;m;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>B-&gt;p[i<sp/>+<sp/>1]<sp/>=<sp/>B-&gt;p[i]<sp/>+<sp/>row_counts[i];</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>QOCOInt*<sp/>temp<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)calloc(</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>A-&gt;m,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/></highlight><highlight class="comment">//<sp/>To<sp/>track<sp/>the<sp/>insertion<sp/>position<sp/>for<sp/>each<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>A-&gt;n;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>A-&gt;p[j];<sp/>i<sp/>&lt;<sp/>A-&gt;p[j<sp/>+<sp/>1];<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>A-&gt;i[i];</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest_pos<sp/>=<sp/>B-&gt;p[row]<sp/>+<sp/>temp[row];</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;i[dest_pos]<sp/>=<sp/>j;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Column<sp/>index<sp/>becomes<sp/>row<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;x[dest_pos]<sp/>=<sp/>A-&gt;x[i];<sp/></highlight><highlight class="comment">//<sp/>Value<sp/>remains<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp[row]++;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clean<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>qoco_free(row_counts);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>qoco_free(temp);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>B;</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d8/d14/linalg_8c_1a2fae5e0df1f9fb3d70115f91a74c9e99" kindref="member">row_col_scale</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOCscMatrix*<sp/>M,<sp/>QOCOFloat*<sp/>E,<sp/>QOCOFloat*<sp/>D)</highlight></codeline>
<codeline lineno="380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>M-&gt;n;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>i<sp/>=<sp/>M-&gt;p[j];<sp/>i<sp/>&lt;<sp/>M-&gt;p[j<sp/>+<sp/>1];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>M-&gt;x[i]<sp/>*=<sp/>(D[j]<sp/>*<sp/>E[M-&gt;i[i]]);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d8/d14/linalg_8c_1ada738414c28d331a24f6095fafebe1c9" kindref="member">ew_product</ref>(QOCOFloat*<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOFloat*<sp/>y,<sp/>QOCOFloat*<sp/>z,<sp/>QOCOInt<sp/>n)</highlight></codeline>
<codeline lineno="389"><highlight class="normal">{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>z[i]<sp/>=<sp/>x[i]<sp/>*<sp/>y[i];</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d8/d14/linalg_8c_1a9399c635b5b4fb0e61f186adfc1d0df2" kindref="member">invert_permutation</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOInt*<sp/>p,<sp/>QOCOInt*<sp/>pinv,<sp/>QOCOInt<sp/>n)</highlight></codeline>
<codeline lineno="396"><highlight class="normal">{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>pinv[p[i]]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal">QOCOInt<sp/><ref refid="d8/d14/linalg_8c_1a26c94e421ef7f9b5895f6b040069c631" kindref="member">cumsum</ref>(QOCOInt*<sp/>p,<sp/>QOCOInt*<sp/>c,<sp/>QOCOInt<sp/>n)</highlight></codeline>
<codeline lineno="403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>qoco_assert(p);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>qoco_assert(c);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>QOCOInt<sp/>nz<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QOCOInt<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>p[i]<sp/>=<sp/>nz;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>nz<sp/>+=<sp/>c[i];</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>c[i]<sp/>=<sp/>p[i];</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>p[n]<sp/>=<sp/>nz;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nz;</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal">QOCOCscMatrix*<sp/><ref refid="d8/d14/linalg_8c_1a9b96a76f1698803fd7cb386fcdfcda57" kindref="member">csc_symperm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOCscMatrix*<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOCOInt*<sp/>pinv,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QOCOInt*<sp/>AtoC)</highlight></codeline>
<codeline lineno="419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>QOCOInt<sp/>i,<sp/>j,<sp/>p,<sp/>q,<sp/>i2,<sp/>j2,<sp/>n;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>QOCOInt*<sp/>Ap;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>QOCOInt*<sp/>Ai;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>QOCOInt*<sp/>Cp;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>QOCOInt*<sp/>Ci;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>QOCOInt*<sp/>w;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>QOCOFloat*<sp/>Cx;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>QOCOFloat*<sp/>Ax;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>QOCOCscMatrix*<sp/>C;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>A-&gt;n;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>Ap<sp/>=<sp/>A-&gt;p;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>Ai<sp/>=<sp/>A-&gt;i;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>Ax<sp/>=<sp/>A-&gt;x;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>C<sp/>=<sp/><ref refid="d8/d14/linalg_8c_1acc38bacc4387241a20e9db0ba2f931e4" kindref="member">new_qoco_csc_matrix</ref>(A);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>w<sp/>=<sp/>qoco_calloc(n,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(QOCOInt));</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>qoco_assert(C);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>qoco_assert(w);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>Cp<sp/>=<sp/>C-&gt;p;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>Ci<sp/>=<sp/>C-&gt;i;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>Cx<sp/>=<sp/>C-&gt;x;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>j++)<sp/></highlight><highlight class="comment">/*<sp/>count<sp/>entries<sp/>in<sp/>each<sp/>column<sp/>of<sp/>C<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>j2<sp/>=<sp/>pinv<sp/>?<sp/>pinv[j]<sp/>:<sp/>j;<sp/></highlight><highlight class="comment">/*<sp/>column<sp/>j<sp/>of<sp/>A<sp/>is<sp/>column<sp/>j2<sp/>of<sp/>C<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(p<sp/>=<sp/>Ap[j];<sp/>p<sp/>&lt;<sp/>Ap[j<sp/>+<sp/>1];<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>Ai[p];</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>j)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>skip<sp/>lower<sp/>triangular<sp/>part<sp/>of<sp/>A<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i2<sp/>=<sp/>pinv<sp/>?<sp/>pinv[i]<sp/>:<sp/>i;<sp/></highlight><highlight class="comment">/*<sp/>row<sp/>i<sp/>of<sp/>A<sp/>is<sp/>row<sp/>i2<sp/>of<sp/>C<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w[qoco_max(i2,<sp/>j2)]++;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>column<sp/>count<sp/>of<sp/>C<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><ref refid="d8/d14/linalg_8c_1a26c94e421ef7f9b5895f6b040069c631" kindref="member">cumsum</ref>(Cp,<sp/>w,<sp/>n);<sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>column<sp/>pointers<sp/>of<sp/>C<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>j2<sp/>=<sp/>pinv<sp/>?<sp/>pinv[j]<sp/>:<sp/>j;<sp/></highlight><highlight class="comment">/*<sp/>column<sp/>j<sp/>of<sp/>A<sp/>is<sp/>column<sp/>j2<sp/>of<sp/>C<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(p<sp/>=<sp/>Ap[j];<sp/>p<sp/>&lt;<sp/>Ap[j<sp/>+<sp/>1];<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>Ai[p];</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>j)</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>skip<sp/>lower<sp/>triangular</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part<sp/>of<sp/>A*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i2<sp/>=<sp/>pinv<sp/>?<sp/>pinv[i]<sp/>:<sp/>i;<sp/></highlight><highlight class="comment">/*<sp/>row<sp/>i<sp/>of<sp/>A<sp/>is<sp/>row<sp/>i2</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>C<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Ci[q<sp/>=<sp/>w[qoco_max(i2,<sp/>j2)]++]<sp/>=<sp/>qoco_min(i2,<sp/>j2);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Cx)</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Cx[q]<sp/>=<sp/>Ax[p];</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AtoC[p]<sp/>=<sp/>q;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>qoco_free(w);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>C;</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/govind/Desktop/git/qoco/src/linalg.c"/>
  </compounddef>
</doxygen>
